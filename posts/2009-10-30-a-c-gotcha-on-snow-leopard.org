---
tags: tech
title: A C++ gotcha on Snow Leopard
---

I've seen this issue mentioned in some random and hard to reach places
on the Net, so I thought I'd re-express it here for those who find
Google sending them this way.

*UPDATE*: According to the discussion at
https://trac.macports.org/ticket/27237, the real problem here is not
fully dynamic string, but the use of _GLIBCXX_DEBUG. So I recommend
ignoring what follows, as it will help you on Snow Leopard or Lion with
gcc 4.6 and above.

#+begin_html
  <!--more-->
#+end_html

On Snow Leopard, Apple decided to build g++ and the standard C++ library
with "fully dynamic strings" enabled. What this means for you relates to
the empty string.

When fully dynamic strings are off (as was true in Leopard), there
exists a single global variable representing the empty string. This
variable lives in the data segment of =libstdc++=, and so it does not
exist on the heap. Whenever a string is deconstructed, the standard
library would check whether that string's address matches matches the
empty string's: if so, it does nothing; if not, it calls =free=.

With fully dynamic strings on, there is no global empty string. All
strings are on the heap, and once their reference count goes to zero,
they get deallocated. Where this creates a problem is if you mix and
match code. If a library that /does/ have fully dynamic strings enabled
(aka the standard library) receives an empty string from code which does
not have it enabled (aka, the app you just built), it will try to free
it and your application will crash.

Here's a reproducible case for this issue using Boost:

#+begin_example
#include 
#include 
#include 

int main()
{
  std::ostringstream buf;
  boost::variant data;
  data = buf.str();
  data = false;
  return 0;
}
#+end_example

In this case -- which really happened to me -- I created an empty string
by calling =ostringstream::str()=. Since I don't have fully dynamic
string on, its address is in data space, not on the heap. I pass this
string to =boost::variant=, which makes a copy of that address. Later,
when the variant is reassigned =false=, it calls =~basic_string= to
deconstruct the string. Since my standard library /is/ compiled with
fully dynamic strings, the destructor for =basic_string= doesn't
recognize that its the "special" empty string, so it tries to free it.

The solution to this problem is three-fold:

1. You must be using the =g++= that comes with Xcode, or if you build
   your own (say, via MacPorts), you must configure it using
   =--enable-fully-dynamic-string=. I've already submitted a patch to
   this effect to the MacPorts crew.

2. All libraries must be compiled with
   =-D_GLIBCXX_FULLY_DYNAMIC_STRING=.

3. Your own code must be compiled with
   =-D_GLIBCXX_FULLY_DYNAMIC_STRING=.

You'll know if this issue is biting you by looking at a stack trace in
gdb. You'll see a crash somewhere inside basic_string's =_M_destroy=
(which calls =free=). Move up the trace a bit and check whether the
string it's trying to free is 0 bytes long.

To recap: what's happened is that an empty string constructed by code
without fully dynamic strings got deallocated by code that was. That is,
most likely you, or a library you built, handed an empty =std::string=
to the system library.
